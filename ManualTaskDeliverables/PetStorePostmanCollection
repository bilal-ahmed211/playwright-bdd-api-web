{
	"info": {
		"_postman_id": "74b883b7-c535-4f72-9d38-ce666b475502",
		"name": "PetStore API Automated Tests",
		"description": "Comprehensive test suite for PetStore API covering all scenarios",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5137976"
	},
	"item": [
		{
			"name": "POST - Add Pet",
			"item": [
				{
					"name": "POST - Create Pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful pet creation",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pet ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.id).to.not.eql(0);",
									"    pm.environment.set(\"petId\", jsonData.id);",
									"});",
									"",
									"pm.test(\"Response has pet name\", function() {",
									"    pm.expect(pm.response.json().name).to.eql(\"doggie\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet"
							]
						},
						"description": "This endpoint allows you to add a new pet to the store. The HTTP POST request should be made to [https://petstore.swagger.io/v2/pet](https://petstore.swagger.io/v2/pet) with the following payload in the raw request body:\n\n``` json\n{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 0,\n    \"name\": \"string\"\n  },\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"string\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 0,\n      \"name\": \"string\"\n    }\n  ],\n  \"status\": \"available\"\n}\n\n ```\n\nThe response will have a status code of 200 and a Content-Type of application/json. The response body will contain the details of the newly added pet, including its ID, category, name, photo URLs, tags, and status.\n\nTo use this endpoint, make sure to set the environment variable 'baseUrl' to '[https://petstore.swagger.io'](https://petstore.swagger.io')."
					},
					"response": []
				},
				{
					"name": "POST - Create Pet (Invalid Data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for invalid pet creation",
									"pm.test(\"Status code is 400 or 500 for invalid data\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invalidField\": \"invalidValue\"\n}"
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Add New Pet without payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pet ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.id).to.be.above(0);",
									"    // Store the pet ID in collection variable",
									"    pm.collectionVariables.set(\"petId\", jsonData.id);",
									"    console.log(\"Stored petId: \" + pm.collectionVariables.get(\"petId\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Add New Pet with extra fields in payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pet ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.be.a('number');",
									"    pm.expect(jsonData.id).to.be.above(0);",
									"    // Store the pet ID in collection variable",
									"    pm.collectionVariables.set(\"petId\", jsonData.id);",
									"    console.log(\"Stored petId: \" + pm.collectionVariables.get(\"petId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"category\": {\n    \"id\": 1,\n    \"name\": \"dogs\"\n  },\n  \"name\": \"Max\",\n  \"photoUrls\": [\n    \"https://example.com/dog.jpg\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"friendly\"\n    }\n  ],\n  \"status\": \"available\"\n}"
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST - Create Pet (Empty Body)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for empty body request",
									"pm.test(\"Status code is 400 or 500 for empty body\", function() {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GET - Fetch Pet",
			"item": [
				{
					"name": "GET - Retrieve Pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for successful pet retrieval",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Pet ID matches requested ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get(\"petId\")));",
									"});",
									"",
									"pm.test(\"Response has all required fields\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.be.a('string');",
									"    pm.expect(jsonData.photoUrls).to.be.an('array');",
									"    pm.expect(jsonData.status).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/{{petId}}",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"{{petId}}"
							],
							"variable": [
								{
									"key": "petId",
									"value": "petId"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Retrieve Pet (Invalid ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for invalid pet ID format",
									"pm.test(\"Status code is 400 for invalid ID format\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/invalidId",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"invalidId"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET - Retrieve Pet (Non-existent ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for non-existent pet ID",
									"pm.test(\"Status code is 404 for non-existent pet\", function() {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://petstore.swagger.io/v2/pet/999999999",
							"protocol": "https",
							"host": [
								"petstore",
								"swagger",
								"io"
							],
							"path": [
								"v2",
								"pet",
								"999999999"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "petId",
			"value": ""
		}
	]
}